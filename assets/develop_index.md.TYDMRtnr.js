import{_ as i,C as n,c as B,o,a3 as E,b as A,w as e,a as l,G as r,a4 as d}from"./chunks/framework.HwITzfHN.js";const m=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"develop/index.md","filePath":"develop/index.md","lastUpdated":1753340199000}'),s={name:"develop/index.md"};function c(h,a,C,_,p,D){const t=n("Mermaid");return o(),B("div",null,[a[4]||(a[4]=E('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><h2 id="开发流程" tabindex="-1">开发流程 <a class="header-anchor" href="#开发流程" aria-label="Permalink to &quot;开发流程&quot;">​</a></h2><p>开发者们好捏，以下是一份开发指南： 如果你想为项目做贡献，需要遵循一下提交流程~</p><h3 id="step1-功能审核" tabindex="-1">Step1. 功能审核 <a class="header-anchor" href="#step1-功能审核" aria-label="Permalink to &quot;Step1. 功能审核&quot;">​</a></h3><p>向github仓库提交自己的issue，然后艾特我查看功能。请在提交issue的时候说明自己想要实现的功能，更改代码的大概范围和实现思路，等待仓库管理员许可后即可开始施工。</p><h3 id="step2-代码审核" tabindex="-1">Step2. 代码审核 <a class="header-anchor" href="#step2-代码审核" aria-label="Permalink to &quot;Step2. 代码审核&quot;">​</a></h3><p>等待代码编写完毕后，使用规范的commit，为你更改的每个部分写清楚commit标注。保证代码的简洁和功能，可扩展性，注释只保留必要说明。没必要的更改比如大幅度修改空行这种要避免。fork后向项目pull request，等待管理员审核完毕merge就可以啦~ 注意事项： 我们的开发主要在develop分支，稳定版在main分支，提交务必以develop为主。如果有特殊分支版本功能扩展，会开新分支开发。</p><h2 id="团队" tabindex="-1">团队 <a class="header-anchor" href="#团队" aria-label="Permalink to &quot;团队&quot;">​</a></h2><h3 id="管理员-collaborators" tabindex="-1">管理员（Collaborators） <a class="header-anchor" href="#管理员-collaborators" aria-label="Permalink to &quot;管理员（Collaborators）&quot;">​</a></h3><p>钦灵、风雪、Vickko、PL</p><h3 id="交流群" tabindex="-1">交流群 <a class="header-anchor" href="#交流群" aria-label="Permalink to &quot;交流群&quot;">​</a></h3><p>项目交流群：<a href="https://qm.qq.com/q/7qMQyizxxm" target="_blank" rel="noreferrer">798012738</a></p><hr><h1 id="项目结构与实现" tabindex="-1">项目结构与实现 <a class="header-anchor" href="#项目结构与实现" aria-label="Permalink to &quot;项目结构与实现&quot;">​</a></h1><h2 id="程序入口" tabindex="-1">程序入口 <a class="header-anchor" href="#程序入口" aria-label="Permalink to &quot;程序入口&quot;">​</a></h2><h3 id="主程序" tabindex="-1">主程序 <a class="header-anchor" href="#主程序" aria-label="Permalink to &quot;主程序&quot;">​</a></h3>',16)),(o(),A(d,null,{default:e(()=>[r(t,{id:"mermaid-46",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5Bbackend%5C%5Cwindows_main.py%5D%0A%20%20%20%20B%5B%E5%90%AF%E5%8A%A8%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%5D%0A%20%20%20%20C%5Bfrontend%5C%5Cpyqtweb.py%5D%0A%20%20%20%20D%5B%E7%AE%80%E6%98%93%E6%B5%8F%E8%A7%88%E5%99%A8%5D%0A%20%20%20%20E%5B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%20localhost%3A8765%5D%0A%20%20%20%20F%5Bstart.windows.bat%5D%0A%20%20%20%20G%5B.venv%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%5D%0A%20%20%20%20H%5B.env%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5D%0A%20%20%20%20I%5Blocalhost%3A8765%2Fsettings%20%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%5D%0A%0A%20%20%20%20A%20--%3E%20B%0A%20%20%20%20B%20--%3E%20C%0A%20%20%20%20C%20--%3E%20D%0A%20%20%20%20D%20--%3E%20E%0A%20%20%20%20F%20--%3E%7C%E6%BF%80%E6%B4%BB%7C%20G%0A%20%20%20%20G%20--%3E%7C%E5%90%AF%E5%8A%A8%7C%20A%0A%20%20%20%20H%20--%3E%20I%0A"})]),fallback:e(()=>a[0]||(a[0]=[l(" Loading... ")])),_:1})),a[5]||(a[5]=E('<ul><li><code>backend\\\\windows_main.py</code> 是主程序入口，负责启动后端服务（监听 8765 端口）</li><li>你也可以直接在浏览器访问 <code>localhost:8765</code>，体验完整功能。</li><li>使用根目录下的 <code>start.windows.bat</code>，会自动激活 <code>.venv</code> 虚拟环境并启动主程序。</li><li>项目配置集中在 <code>.env</code> 文件，访问 <code>localhost:8765/settings</code> 可自动读取并生成可视化配置界面</li></ul><h3 id="桌宠" tabindex="-1">桌宠 <a class="header-anchor" href="#桌宠" aria-label="Permalink to &quot;桌宠&quot;">​</a></h3>',2)),(o(),A(d,null,{default:e(()=>[r(t,{id:"mermaid-72",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20J%5Bbackend%5C%5Cdesktop_pet%5C%5Cdesktop_pet.py%5D%0A%20%20%20%20K%5B%E7%8B%AC%E7%AB%8B%E6%A1%8C%E5%AE%A0%E8%BF%9B%E7%A8%8B%5D%0A%20%20%20%20L%5B%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E5%9D%87%E5%9C%A8%20backend%5C%5Cdesktop_pet%5D%0A%20%20%20%20M%5Bdesk_pet.bat%5D%0A%20%20%20%20N%5B.venv%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%5D%0A%0A%20%20%20%20M%20--%3E%7C%E6%BF%80%E6%B4%BB%7C%20N%0A%20%20%20%20N%20--%3E%7C%E5%90%AF%E5%8A%A8%7C%20J%0A%20%20%20%20J%20--%3E%20K%0A%20%20%20%20J%20--%3E%20L%0A"})]),fallback:e(()=>a[1]||(a[1]=[l(" Loading... ")])),_:1})),a[6]||(a[6]=E('<ul><li><code>backend\\\\desktop_pet\\\\desktop_pet.py</code> 是桌宠程序的启动入口，运行时会启动一个完全独立于主程序的桌宠进程。</li><li>所有桌宠相关代码均位于 <code>backend\\\\desktop_pet</code> 目录，便于维护和扩展。</li><li>使用根目录下的 <code>desk_pet.bat</code>，会自动激活 <code>.venv</code> 虚拟环境并启动桌宠程序。</li></ul><h2 id="程序结构" tabindex="-1">程序结构 <a class="header-anchor" href="#程序结构" aria-label="Permalink to &quot;程序结构&quot;">​</a></h2>',2)),(o(),A(d,null,{default:e(()=>[r(t,{id:"mermaid-93",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E9%A1%B9%E7%9B%AE%E6%A0%B9%E7%9B%AE%E5%BD%95%5D%20--%3E%7C%E5%8C%85%E5%90%AB%7C%20B%5Bbackend%5D%0A%20%20%20%20A%20--%3E%7C%E5%8C%85%E5%90%AB%7C%20C%5Bfrontend%5D%0A%20%20%20%20A%20--%3E%7C%E5%8C%85%E5%90%AB%7C%20D%5Bdata%5D%0A%20%20%20%20B%20--%3E%7C%E8%BF%90%E8%A1%8C%E5%9C%A88765%E7%AB%AF%E5%8F%A3%7C%20E%5B%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%5D%0A%20%20%20%20C%20--%3E%7C%E5%8C%85%E5%90%AB%7C%20F%5BHTML%2C%20JavaScript%2C%20CSS%5D%0A%20%20%20%20D%20--%3E%7C%E5%AD%98%E5%82%A8%7C%20G%5B%E6%97%A5%E5%BF%97%E5%92%8C%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%5D%0A%20%20%20%20E%20--%3E%7C%E4%BE%9D%E8%B5%96%7C%20H%5BPython%E5%BA%93%5D%0A%20%20%20%20F%20--%3E%7C%E6%B8%B2%E6%9F%93%7C%20I%5B%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%5D%0A%20%20%20%20G%20--%3E%7C%E5%A4%87%E4%BB%BD%7C%20J%5B%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%5D%0A"})]),fallback:e(()=>a[2]||(a[2]=[l(" Loading... ")])),_:1})),a[7]||(a[7]=E('<ul><li><code>backend</code> 目录包含基于 Python 的后端服务，负责监听 8765 端口。</li><li><code>frontend</code> 目录存放前端资源，包括 HTML、JavaScript 和 CSS 文件。</li><li><code>data/logs</code> 用于存储日志、对话记录及缓存数据。此目录内容可安全删除，但如需备份聊天记录请提前保存。</li></ul><h2 id="其他相关" tabindex="-1">其他相关 <a class="header-anchor" href="#其他相关" aria-label="Permalink to &quot;其他相关&quot;">​</a></h2><h3 id="torch-与神经网络库依赖" tabindex="-1">torch 与神经网络库依赖 <a class="header-anchor" href="#torch-与神经网络库依赖" aria-label="Permalink to &quot;torch 与神经网络库依赖&quot;">​</a></h3>',3)),(o(),A(d,null,{default:e(()=>[r(t,{id:"mermaid-117",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20K%5Btorch%20%E5%BA%93%5D%20--%3E%7C%E6%94%AF%E6%8C%81%7C%20L%5BAI%20%E6%83%85%E7%BB%AA%E8%AF%86%E5%88%AB%5D%0A%20%20%20%20L%20--%3E%7C%E5%88%87%E6%8D%A2%7C%20M%5B%E7%AB%8B%E7%BB%98%5D%0A%20%20%20%20K%20--%3E%7C%E6%94%AF%E6%8C%81%7C%20N%5BRAG%20%E5%90%91%E9%87%8F%E5%BA%93%5D%0A%20%20%20%20N%20--%3E%7C%E5%AD%98%E5%82%A8%7C%20O%5B%E5%AF%B9%E8%AF%9D%E5%8E%86%E5%8F%B2%5D%0A%20%20%20%20N%20--%3E%7C%E7%BC%93%E5%AD%98%7C%20P%5B%E8%AF%AD%E4%B9%89%E5%90%91%E9%87%8F%E5%8C%96%E6%95%B0%E6%8D%AE%5D%0A"})]),fallback:e(()=>a[3]||(a[3]=[l(" Loading... ")])),_:1})),a[8]||(a[8]=E("<ul><li>项目采用自训练模型，通过 torch 库识别 AI 当前情绪，实现立绘自动切换。</li><li>集成 RAG 向量库，实现永久记忆系统： <ul><li>启用 RAG 后，对话内容以 JSON 格式存储于 <code>data/rag_chat_history/</code>。</li><li>语义向量化结果缓存在 <code>data/chroma_db_store/</code>。注意：缓存不支持自动删除，如需手动修改或清理 <code>rag_chat_history/</code>，请同时删除整个 <code>chroma_db_store/</code> 文件夹以保证记忆库同步。</li></ul></li><li>计算资源需求较低，仅需 torch-cpu，普通 4 代 i3 以上电脑即可流畅运行</li></ul>",1))])}const b=i(s,[["render",c]]);export{m as __pageData,b as default};
