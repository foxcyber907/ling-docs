import{_ as l,C as a,c as e,o as h,a2 as o,G as i}from"./chunks/framework.CPU0zDjs.js";const r="/assets/depoly_android/cmd-ipconfig.webp",n="/assets/depoly_android/%E6%89%8B%E6%9C%BA%E5%89%8D%E7%AB%AF%E6%BC%94%E7%A4%BA.webp",k="/assets/depoly_android/adb%E5%9C%B0%E5%9D%80-1.webp",d="/assets/depoly_android/adb-2.webp",c="/assets/depoly_android/adb-3.webp",F="/assets/depoly_android/adb-4.webp",g="/assets/depoly_android/adb-ok.webp",u="/assets/depoly_android/restore-1.webp",y="/assets/depoly_android/restone-2.webp",C="/assets/depoly_android/restone-3.webp",m="/assets/depoly_android/batterychoose.webp",D=JSON.parse('{"title":"Android 部署指南","description":"详细指导如何在Android设备上部署LingChat，包括手机与电脑配合使用和纯手机部署两种方案。","frontmatter":{"title":"Android 部署指南","description":"详细指导如何在Android设备上部署LingChat，包括手机与电脑配合使用和纯手机部署两种方案。","outline":{"level":[2,5]}},"headers":[],"relativePath":"manual/deployment/android_deploy.md","filePath":"manual/deployment/android_deploy.md","lastUpdated":1758397661000}'),b={name:"manual/deployment/android_deploy.md"};function E(B,s,_,q,A,v){const t=a("NolebaseGitContributors"),p=a("NolebaseGitChangelog");return h(),e("div",null,[s[0]||(s[0]=o('<h1 id="📱-android-部署指南" tabindex="-1">📱 Android 部署指南 <a class="header-anchor" href="#📱-android-部署指南" aria-label="Permalink to &quot;📱 Android 部署指南&quot;">​</a></h1><blockquote><p>[IMPORTANT] 文档已经过久没有更新，请慎重跟随文档进行操作</p></blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>本教程提供两种部署方式，请按需使用哦=w=</p><ol><li><a href="/manual/deployment/android_deploy.html#phone_win_deploy">手机+电脑的配合使用</a><ul><li>适合大多数用户，使用手机和电脑配合部署。</li><li>使用手机浏览器访问电脑上的 LingChat，并在电脑上运行后端服务。</li></ul></li><li><a href="/manual/deployment/android_deploy.html#pure_phone_deploy">纯手机使用</a><ul><li>适合没有电脑或想折腾的用户。</li></ul></li></ol></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在钦灵的努力下，手机端界面有了基础适配，在安装完毕后记得更新，不过界面可能仍有点奇怪。</p></div><h2 id="phone_win_deploy" tabindex="-1">一、 手机+电脑的配合使用 <a class="header-anchor" href="#phone_win_deploy" aria-label="Permalink to &quot;一、 手机+电脑的配合使用 {#phone_win_deploy}&quot;">​</a></h2><h3 id="具体操作" tabindex="-1">具体操作 <a class="header-anchor" href="#具体操作" aria-label="Permalink to &quot;具体操作&quot;">​</a></h3><blockquote><p>请确保电脑和手机在 <strong>同一网络</strong> 下，否则无法使用。</p></blockquote><blockquote><p>如有需要可参考 <a href="/manual/deployment/win_deploy.html">Windows 部署</a> 教程。</p></blockquote><p>首先，查看电脑 ip 地址，如果你的电脑是 Windows 系统，先在键盘上同时按下 <strong>Windows徽标键+字母R键</strong> 输入 <strong>cmd</strong> 打开命令提示符，再在黑窗口中输入 <strong>ipconfig</strong> ，回车，窗口中可能出现以下内容：</p><p><img src="'+r+'" alt="cmd-ipconfig"> 记下其中的 <strong>IPv4 地址</strong> 后的 <strong>ip地址</strong>。</p><p>然后在电脑上打开 LingChat，观察命令提示符（黑窗口）中是否有这一行字：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INFO:     Uvicorn running on http://0.0.0.0:3000 (Press CTRL+C to quit)</span></span></code></pre></div><p>记下 <code>0.0.0.0:</code> 之后的数字，这是 <strong>端口号</strong> 。（可能与示例不同，请以实际为准）</p><p>打开你的手机浏览器，手机调为横屏，在地址栏输入 <strong>ip地址 + 一个英文的分号（: ) + 端口号</strong> 即可使用。正常情况下如下图：</p><p><img src="'+n+'" alt="手机前端演示"></p><h2 id="pure_phone_deploy" tabindex="-1">二、纯手机的使用 <a class="header-anchor" href="#pure_phone_deploy" aria-label="Permalink to &quot;二、纯手机的使用 {#pure_phone_deploy}&quot;">​</a></h2><h3 id="安装-zerotermux-环境" tabindex="-1">安装 ZeroTermux 环境 <a class="header-anchor" href="#安装-zerotermux-环境" aria-label="Permalink to &quot;安装 ZeroTermux 环境&quot;">​</a></h3><p>前往 <a href="https://github.com/hanxinhao000/ZeroTermux/releases/tag/release" target="_blank" rel="noreferrer">ZeroTermux-Github</a> 下载ZeroTermux安装包并安装。</p><p>如果下载太慢或无法下载，可尝试使用 <a href="https://ghfast.top/github.com/hanxinhao000/ZeroTermux/releases/download/release/ZeroTermux-0.118.1.43.apk" target="_blank" rel="noreferrer">Github镜像源</a> 下载并安装。</p><p>注意：<strong>安装其他版本或者选择Termux会导致以下教程出现部分的不适用，不建议这样做</strong></p><p>进入ZeroTermux软件界面，提示完整阅读协议时记得要把文字内容拉到最底下。</p><p>双击屏幕左侧边缘（部分ZT版本是按音量上/下键），下滑并点击&quot;切换源&quot;。（推荐选择<code>清华源</code>）</p><p>等待运行完成后，再重复一遍。（让手机加深印象）</p><div class="note custom-block github-alert"><p class="custom-block-title">如无特殊说明，当出现 `(Y/I/N/O/D/Z)[default=?]` 或 `[Y/N]` 时，直接点击回车，选择默认选项即可。</p><p></p></div><h3 id="可选-解除进程限制-安卓-12-以上" tabindex="-1">可选：解除进程限制（安卓 12 以上） <a class="header-anchor" href="#可选-解除进程限制-安卓-12-以上" aria-label="Permalink to &quot;可选：解除进程限制（安卓 12 以上）&quot;">​</a></h3><blockquote><p>这一步只需安卓 12 以上版本的手机操作，如果你不清楚你的手机版本，推荐操作一下。</p><p>另外你需要打开手机开发者选项，详情搜索百度。</p><p>华为或荣耀设备请跳过此步，因为暂时用不了。</p></blockquote><p>首先 <a href="/manual/deployment/android_deploy.html#install_tmoe">安装 tmoe</a>。</p><p>上下滑动屏幕选择 <strong>修复 android 12</strong> ，回车，看提示选择（一般全回车默认），直到下图：</p><p><img src="'+k+'" alt=""></p><p>现在你需要分屏操作，分屏后点击 设置 的 <strong>开发者选项-无线调试</strong> 右边的滑块， 再点击左边 <strong>无线调试</strong> 四个大字（对没错，左边是可以点的），位置如下图：</p><p><img src="'+d+'" alt=""></p><p>打开新界面后，点击 <strong>使用配对码配对设备</strong> ，弹出以下窗口，此时回到 ZeroTermux，输入 <strong>IP 地址与端口</strong> 中的内容，回车，再输入配对码，弹出下图：</p><p><img src="'+c+'" alt=""></p><p>在下面的窗口点 <strong>取消</strong> ，上面窗口选择 <strong>不是</strong> 回车，然后按照下面界面另一个 <strong>IP 地址与端口</strong> 填上面窗口的内容，如下图：</p><p><img src="'+F+'" alt=""></p><p>之后出现下图，配置完毕，关掉下面的设置后，在 <strong>ZeroTermux</strong> 回车回到主界面。</p><p><img src="'+g+`" alt=""></p><h3 id="部署-lingchat" tabindex="-1">部署 LingChat <a class="header-anchor" href="#部署-lingchat" aria-label="Permalink to &quot;部署 LingChat&quot;">​</a></h3><p>我们提供多种方式部署 LingChat，您可以选择最合适的进行操作。当一种方式不行时，可以更换另一种方式。</p><ol><li><p><a href="/manual/deployment/android_deploy.html#use_tmoe">使用 tmoe 安装打包好的容器</a></p><ul><li>基本上不会出现问题，最简便。</li></ul></li><li><p><a href="/manual/deployment/android_deploy.html#use-proot-distro">使用 proot-distro 和打包好的 python</a></p><ul><li>更加轻量化，但可能有未知问题。</li></ul></li></ol><h4 id="use_tmoe" tabindex="-1">方法一：使用预先打包好的容器 <a class="header-anchor" href="#use_tmoe" aria-label="Permalink to &quot;方法一：使用预先打包好的容器 {#use_tmoe}&quot;">​</a></h4><blockquote><p>内置的 LingChat来自<a href="https://github.com/shadow01a/LingChat/tree/develop-termux" target="_blank" rel="noreferrer">我的分支</a>，因为develop分支更新比较频繁，避免更新出什么奇怪的问题......</p></blockquote><h5 id="下载容器" tabindex="-1">下载容器 <a class="header-anchor" href="#下载容器" aria-label="Permalink to &quot;下载容器&quot;">​</a></h5><p>在 <strong>ZeroTermux 的终端</strong> 复制执行以下命令，这将下载本人打包好的容器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./storage/downloads/backup</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./storage/downloads/backup/containers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./storage/downloads/backup/containers/proot</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./storage/downloads/backup/containers/proot</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://www.modelscope.cn/models/kxdw2580/LingChat-phone-file/resolve/master/debian-bookworm_arm64-LingChat-dev_2025-07-10_21-38-rootfs_bak.tar.xz</span></span></code></pre></div><h5 id="install_tmoe" tabindex="-1">安装tmoe <a class="header-anchor" href="#install_tmoe" aria-label="Permalink to &quot;安装tmoe {#install_tmoe}&quot;">​</a></h5><p>下载完毕后，再次按下 手机音量键上（+），点击 <strong>MOE全能</strong> ，这里会跳出提示。</p><p>先点击回车，进入 <strong>协议部分</strong> ，你需要手动输入 <code>y</code> 然后回车。</p><p>接下来，你需要在选择源时选择 <strong>gitee</strong> 。（如果提示是：是否从 gitee 获取相关文件? [Y/n] 则回车开始安装，反之输入一个字母 <strong>n</strong> 再回车）</p><p>之后没有问题会进入主界面。</p><h5 id="安装-proot-和容器" tabindex="-1">安装 proot 和容器 <a class="header-anchor" href="#安装-proot-和容器" aria-label="Permalink to &quot;安装 proot 和容器&quot;">​</a></h5><p>在 tmoe 中选择最上面的 <strong>proot</strong> 回车。</p><p>等待安装完毕后，滑动屏幕选择 <strong>恢复/还原proot容器</strong> 回车，出现下图：</p><p><img src="`+u+'" alt=""></p><p>选择常规模式，回车，出现以下界面：</p><p><img src="'+y+'" alt=""></p><p>选右边那个，回车，出现以下界面：</p><p><img src="'+C+'" alt=""></p><p>输入一个 0 ，回车，等解压完成回车回到主界面。此时再进入 proot 界面，选择当前已安装容器列表，无脑回车即可打开容器。（此时需要等待容器加载完成）</p><blockquote><p>如果出现以下界面，直接确定。 <img src="'+m+`" alt=""></p></blockquote><p>OK啦，LingChat安装完毕！接下来到下面学习如何启动它。</p><h4 id="use-proot-distro" tabindex="-1">方法二：使用 proot-distro 部署 <a class="header-anchor" href="#use-proot-distro" aria-label="Permalink to &quot;方法二：使用 proot-distro 部署 {#use-proot-distro}&quot;">​</a></h4><p>输入以下命令 <strong>安装 proot-distro</strong>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proot-distro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proot-distro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">这样安装可能会有点慢或干脆无法下载（github的锅）。此时运行以下命令安装debian：</p><p></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://modelscope.cn/models/kxdw2580/LingChat-phone-file/resolve/master/proot-distro-debian-bookwarm-0721.tar.xz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proot-distro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./proot-distro-debian-bookwarm-0721.tar.xz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proot-distro-debian-bookwarm-0721.tar.xz</span></span></code></pre></div></div><p>这时候 debian 应该安装好了，输入 <code>proot-distro login debian</code> 登录 debian。</p><p>之后你需要克隆 LingChat项目文件，运行的命令有以下选择：</p><div class="note custom-block github-alert"><p class="custom-block-title">命令都加上了加速站，如有介意者自行删除使用官方源。</p><p></p></div><ul><li><p><code>git clone https://ghfast.top/github.com/SlimeBoyOwO/LingChat/</code> ：这会使用官方的 main 分支，更稳定，但是功能较开发版有所欠缺，且未适配手机界面。</p></li><li><p><code>git clone -b develop https://ghfast.top/github.com/SlimeBoyOwO/LingChat/</code> ：这会使用官方的 develop 分支，更新更及时，但是可能会有未知的问题。</p></li><li><p><code>git clone -b develop-termux https://ghfast.top/github.com/shadow01a/LingChat/</code> ：这会使用 shadow01a 的 develop-termux 分支，尽量平衡了更新进度和稳定性，且运行经过手机测试，但未经官方审查。</p></li></ul><p>根据你自己需求选择一条命令运行。</p><p>克隆完毕后，运行以下命令 <strong>安装 python 及其依赖</strong> ：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 备份 + 更换清华源 + 更新</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/sources.list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/sources.list.bak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/sources.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;EOF&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#安装sqlite3依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sqlite3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#安装预先打包的 python3.12.10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://modelscope.cn/models/kxdw2580/LingChat-phone-file/resolve/master/python-3.12.10-lingchat-250707.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xzf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/python-3.12.10-lingchat-250707.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python-3.12.10-lingchat-250707.tar.gz</span></span></code></pre></div><p>安装完毕后即可正常使用，但为了以后简便点，我们还要做一步：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/lingchat.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;EOF&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cd LingChat</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/root/python3.12.10/bin/python3.12 backend/windows_main.py</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/lingchat.sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/update.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;EOF&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cd LingChat</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">git pull</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/root/python3.12.10/bin/python3.12 -m pip install -r requirements.txt</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/update.sh</span></span></code></pre></div><p>这样以后可以用 <code>bash lingchat.sh</code> 启动 LingChat，用 <code>bash update.sh</code> 命令更新 LingChat。</p><h3 id="配置-lingchat" tabindex="-1">配置 LingChat <a class="header-anchor" href="#配置-lingchat" aria-label="Permalink to &quot;配置 LingChat&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>接下来的步骤请打开容器。</p><p>如果你是使用 <strong>方法一</strong> 安装，在 ZeroTermux的终端输入 <code>debian</code> 启动安装好的容器。</p><p>如果你是使用 <strong>方法二</strong> 安装，在 ZeroTermux的终端输入 <code>proot-distro login debian</code> 启动安装好的容器。</p></div><p>这样部署的 LingChat 不能直接使用，需要一些配置。</p><p>首先，获取 api_key 等内容，可在 <a href="https://platform.deepseek.com/" target="_blank" rel="noreferrer">DeepSeek的官方API获取网站</a> ， <a href="https://api.siliconflow.com/" target="_blank" rel="noreferrer">硅基流动API获取网站</a> 等地方获取。</p><p>然后，在容器中先粘贴以下命令，再粘贴你的 api_key ，回车运行 ：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> API_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span></code></pre></div><p>之后再运行此命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingChat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/LingChat/.env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># 基础设置 BEGIN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## API 与 模型 设置 BEGIN # 配置与AI模型和API相关的密钥和地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LLM_PROVIDER=&quot;webllm&quot; # 在这里选择对话模型，只可以填写webllm, gemini, ollama, lmstudio四个选项，webllm代表通用需要联网的AI模型（如deepseek），ollama和lmstudio表示本地，gemini如名）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CHAT_API_KEY=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$API_KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; # DeepSeek 或其他聊天模型的 API Key</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VD_API_KEY=&quot;sk-114514&quot; # 图像识别模型的 API Key</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CHAT_BASE_URL=&quot;https://api.deepseek.com&quot; # API的访问地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MODEL_TYPE=&quot;deepseek-chat&quot; # 使用的模型类型</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VD_BASE_URL=&quot;https://api.siliconflow.cn/v1&quot; # 视觉模型的API访问地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VD_MODEL=&quot;Pro/Qwen/Qwen2.5-VL-7B-Instruct&quot; # 视觉模型的模型类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OLLAMA_BASE_URL=&quot;http://localhost:11434&quot; # Ollama配置- 地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OLLAMA_MODEL=&quot;llama3&quot; # Ollama配置- 模型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LMSTUDIO_MODEL_TYPE=&quot;unknow&quot; # LM STUDIO 配置- 模型</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LMSTUDIO_BASE_URL=&quot;http://localhost:1234/v1&quot; # LM STUDIO 配置- 地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LMSTUDIO_API_KEY=&quot;lm-studio&quot; # LM STUDIO 配置- APIKEY 似乎不需要</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GEMINI_API_KEY=&quot;sk-114514&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GEMINI_MODEL_TYPE=&quot;gemini-pro&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## API 与 模型 设置 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## 对话功能设定 BEGIN # 配置RAG（检索增强生成）系统，让AI能“记忆”历史对话</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USE_RAG=false # 是否启用RAG系统 [type:bool]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USE_TIME_SENSE=true # 是否启用时间感知 [type:bool]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## 对话功能设定 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># 基础设置 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># 开发者设置 BEGIN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## RAG系统设定 BEGIN # 配置RAG（检索增强生成）系统，让AI能“记忆”历史对话</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RAG_RETRIEVAL_COUNT=3 # 每次回答时检索的相关历史对话数量</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RAG_WINDOW_COUNT=5 # 取当前的最新N条消息作为短期记忆，之后则是RAG消息，然后是过去的记忆。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RAG_HISTORY_PATH=&quot;data/rag_chat_history&quot; # RAG历史记录存储路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CHROMA_DB_PATH=&quot;data/chroma_db_store&quot; # ChromaDB向量数据库的存储路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RAG_PROMPT_PREFIX=&quot;--- 以下是根据你的历史记忆检索到的相关对话片段，请参考它们来回答当前问题。这些是历史信息，不是当前对话的一部分： ---&quot; # RAG前缀提示，支持多行</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RAG_PROMPT_SUFFIX=&quot;--- 以上是历史记忆检索到的内容。请注意，这些内容用于提供背景信息，你不需要直接回应它们，而是基于它们和下面的当前对话来生成回复。 ---&quot; # RAG后缀提示，支持多行</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## RAG系统设定 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## 存储与日志 BEGIN # 配置日志和其他文件的存储位置</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BACKEND_LOG_DIR=&quot;data/logs&quot; # 后端服务日志目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">APP_LOG_DIR=&quot;data/log&quot; # 应用行为日志目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TEMP_VOICE_DIR=&quot;frontend/public/audio&quot; # 临时生成的语音文件存放目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ENABLE_FILE_LOGGING=false # 是否将日志记录到文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LOG_FILE_DIRECTORY=&quot;data/run_logs&quot; # 日志文件的存储目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## 存储与日志 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## Debug信息 BEGIN # 用于开发和调试的设置</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LOG_LEVEL=INFO # 日志设置：默认为INFO，设置为DEBUG时启用开发者模式，输出更详尽的日志</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PRINT_CONTEXT=true # 更改True/False，决定是否把本次发送给llm的全部上下文信息截取后打印到终端</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## Debug信息 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## 服务端口配置 BEGIN # 配置各个服务的网络监听地址和端口</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BACKEND_BIND_ADDR=&quot;0.0.0.0&quot; # 后端监听地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BACKEND_PORT=12746 # 后端监听端口</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FRONTEND_BIND_ADDR=&quot;0.0.0.0&quot; # 前端监听地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FRONTEND_PORT=3000 # 前端监听端口</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EMOTION_BIND_ADDR=&quot;0.0.0.0&quot; # 情感分析服务监听地址</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EMOTION_PORT=8000 # 情感分析服务监听端口</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">## 服务端口配置 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># 开发者设置 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span></span></code></pre></div><p>这样就配置完成了。</p><div class="note custom-block github-alert"><p class="custom-block-title">默认未开启RAG功能，因为这必定会导致启动后第一次的白屏，需要等待加载完成刷新才行，有需要请自行在网页打开或修改.env文件。</p><p></p></div><h3 id="启动-lingchat" tabindex="-1">启动 LingChat <a class="header-anchor" href="#启动-lingchat" aria-label="Permalink to &quot;启动 LingChat&quot;">​</a></h3><p>配置完成后，每次启动容器之后，就可以输入 <code>bash lingchat.sh</code> 打开 LingChat服务端，待没有东西继续输出之后，打开你的手机浏览器，手机调为横屏，在地址栏输入 <code>127.0.0.1:12746</code> 即可使用。如下图：</p><p><img src="`+n+'" alt=""></p><h3 id="更新-lingchat" tabindex="-1">更新 LingChat <a class="header-anchor" href="#更新-lingchat" aria-label="Permalink to &quot;更新 LingChat&quot;">​</a></h3><p>输入 <code>bash update.sh</code> 即可自动更新。</p>',90)),i(t),i(p)])}const I=l(b,[["render",E]]);export{D as __pageData,I as default};
