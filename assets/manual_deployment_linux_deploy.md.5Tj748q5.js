import{_ as i,c as a,o as n,a3 as t}from"./chunks/framework.HwITzfHN.js";const c=JSON.parse('{"title":"🐧  Linux 部署","description":"","frontmatter":{"outline":{"level":[2,4]}},"headers":[],"relativePath":"manual/deployment/linux_deploy.md","filePath":"manual/deployment/linux_deploy.md","lastUpdated":1753349537000}'),h={name:"manual/deployment/linux_deploy.md"};function l(p,s,e,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="🐧-linux-部署" tabindex="-1">🐧 Linux 部署 <a class="header-anchor" href="#🐧-linux-部署" aria-label="Permalink to &quot;🐧  Linux 部署&quot;">​</a></h1><ul><li>以下内容假设你对Linux系统有一定的了解，如果觉得难以理解，请用使用Windows系统部署<a href="/manual/deployment/win_deploy.html">Windows部署指南</a></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>本教程推荐使用 <a href="https://docs.astral.sh/uv/" target="_blank" rel="noreferrer">uv</a> 作为 Python 包管理器，它提供了更快的包安装速度和更好的依赖管理体验。当然，传统的 pip 和 conda 方式依然可用。</p></div><h2 id="一、-克隆lingchat-获取必要的文件" tabindex="-1">一、 克隆LingChat，获取必要的文件 <a class="header-anchor" href="#一、-克隆lingchat-获取必要的文件" aria-label="Permalink to &quot;一、 克隆LingChat，获取必要的文件&quot;">​</a></h2><p>通过 git clone 将 <a href="https://github.com/SlimeBoyOwO/LingChat/" target="_blank" rel="noreferrer">LingChat repo</a> clone 到本地</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/SlimeBoyOwO/LingChat.git</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您想提前体验新功能，可拉取 <code>develop</code> 分支，更新更及时，但是可能会有未知的问题</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/SlimeBoyOwO/LingChat.git</span></span></code></pre></div></div><h2 id="二、python环境配置" tabindex="-1">二、Python环境配置 <a class="header-anchor" href="#二、python环境配置" aria-label="Permalink to &quot;二、Python环境配置&quot;">​</a></h2><p>需确保Python版本为3.10及以上</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>如果版本低于3.10，请更新Python版本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此处以 Python 3.12 为例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ubuntu/Debian</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3.12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3.12-venv</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如执行了这一步，建议在执行时将python3指向python3.12</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新替代方案，设置 python3.12 为默认的 python3 版本:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-alternatives</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/python3.12</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-alternatives</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span></span></code></pre></div><h3 id="安装-uv-推荐" tabindex="-1">安装 uv (推荐) <a class="header-anchor" href="#安装-uv-推荐" aria-label="Permalink to &quot;安装 uv (推荐)&quot;">​</a></h3><p>安装 uv 包管理器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 pip 安装 uv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uv</span></span></code></pre></div><p>或者使用官方安装脚本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -LsSf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://astral.sh/uv/install.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用 uv 时需要先运行 <code>uv venv</code> 创建虚拟环境，然后使用 <code>uv pip install</code> 安装依赖，或者直接使用 <code>uv run</code> 命令来自动管理虚拟环境。</p></div><h3 id="传统方式环境配置" tabindex="-1">传统方式环境配置 <a class="header-anchor" href="#传统方式环境配置" aria-label="Permalink to &quot;传统方式环境配置&quot;">​</a></h3><h4 id="方法1-使用venv" tabindex="-1">方法1：使用venv <a class="header-anchor" href="#方法1-使用venv" aria-label="Permalink to &quot;方法1：使用venv&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingChat/venv</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 创建虚拟环境    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingChat/venv/bin/activate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 激活环境</span></span></code></pre></div><h4 id="方法2-使用conda-需先安装miniconda或anaconda" tabindex="-1">方法2：使用conda（需先安装Miniconda或Anaconda） <a class="header-anchor" href="#方法2-使用conda-需先安装miniconda或anaconda" aria-label="Permalink to &quot;方法2：使用conda（需先安装Miniconda或Anaconda）&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Miniconda3-latest-Linux-x86_64.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingChatEnv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.12</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> activate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingChatEnv</span></span></code></pre></div><h2 id="三、依赖安装" tabindex="-1">三、依赖安装 <a class="header-anchor" href="#三、依赖安装" aria-label="Permalink to &quot;三、依赖安装&quot;">​</a></h2><h3 id="使用-uv-安装依赖-推荐" tabindex="-1">使用 uv 安装依赖 (推荐) <a class="header-anchor" href="#使用-uv-安装依赖-推荐" aria-label="Permalink to &quot;使用 uv 安装依赖 (推荐)&quot;">​</a></h3><p>进入LingChat文件夹，创建虚拟环境并安装依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingChat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>uv pip install</code> 在该环境中安装依赖时貌似有个错误，但是我忘了是啥了，欢迎 <a href="https://github.com/foxcyber907/ling-docs/issues" target="_blank" rel="noreferrer">提issue</a></p></div><h3 id="使用传统方式安装依赖" tabindex="-1">使用传统方式安装依赖 <a class="header-anchor" href="#使用传统方式安装依赖" aria-label="Permalink to &quot;使用传统方式安装依赖&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingChat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span></span></code></pre></div><h3 id="配置-env-文件" tabindex="-1">配置 <code>.env</code> 文件 <a class="header-anchor" href="#配置-env-文件" aria-label="Permalink to &quot;配置 \`.env\` 文件&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><p>根据提示配置 <code>API密钥</code> 即可</p><p>配置完成后请按<code>Ctrl+O</code>保存，然后按<code>Ctrl+O</code>退出。</p><details class="details custom-block"><summary><code>.env</code>文件内容如下：</summary><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基础设置 BEGIN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## API 与 模型 设置 BEGIN # 配置与AI模型和API相关的密钥和地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LLM_PROVIDER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webllm&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 在这里选择对话模型，只可以填写webllm, gemini, ollama, lmstudio三个选项，webllm代表通用需要联网的AI模型（如deepseek），ollama和lmstudio表示本地，gemini如名）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CHAT_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # DeepSeek 或其他聊天模型的 API Key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VD_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 图像识别模型的 API Key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CHAT_BASE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.deepseek.com&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # API的访问地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MODEL_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deepseek-chat&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用的模型类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VD_BASE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.siliconflow.cn/v1&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 视觉模型的API访问地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VD_MODEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pro/Qwen/Qwen2.5-VL-7B-Instruct&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 视觉模型的模型类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OLLAMA_BASE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:11434&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Ollama配置- 地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OLLAMA_MODEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;llama3&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Ollama配置- 模型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LMSTUDIO_MODEL_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unknow&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # LM STUDIO 配置- 模型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LMSTUDIO_BASE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:1234/v1&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # LM STUDIO 配置- 地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LMSTUDIO_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lm-studio&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # LM STUDIO 配置- APIKEY 似乎不需要</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GEMINI_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sk-114514&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GEMINI_MODEL_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gemini-pro&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## API 与 模型 设置 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 对话功能设定 BEGIN # 配置RAG（检索增强生成）系统，让AI能“记忆”历史对话</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USE_RAG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用RAG系统 [type:bool]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USE_TIME_SENSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用时间感知 [type:bool]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 对话功能设定 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 人物设定（弃用） BEGIN # 个性化AI和用户的名称，本部分已经迁移至多人物，不过你可以在这里留个简单的备份</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USER_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Lovely You&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 您的称呼</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USER_SCHOOL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BiliBili University&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 您的学校或组织</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AI_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;风雪&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # AI的称呼</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AI_SCHOOL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;艾草 Studio&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # AI的出品方</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SYSTEM_PROMPT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;已省略角色设定.....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设定人物角色 [type:textarea]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 人物设定（弃用） END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基础设置 END</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开发者设置 BEGIN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## RAG系统设定 BEGIN # 配置RAG（检索增强生成）系统，让AI能“记忆”历史对话</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RAG_RETRIEVAL_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=3 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每次回答时检索的相关历史对话数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RAG_WINDOW_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=5 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 取当前的最新N条消息作为短期记忆，之后则是RAG消息，然后是过去的记忆。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RAG_HISTORY_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/rag_chat_history&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # RAG历史记录存储路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CHROMA_DB_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/chroma_db_store&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ChromaDB向量数据库的存储路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RAG_PROMPT_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--- 以下是根据你的历史记忆检索到的相关对话片段，请参考它们来回答当前问题。这些是历史信息，不是当前对话的一部分： ---&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # RAG前缀提示，支持多行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RAG_PROMPT_SUFFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--- 以上是历史记忆检索到的内容。请注意，这些内容用于提供背景信息，你不需要直接回应它们，而是基于它们和下面的当前对话来生成回复。 ---&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # RAG后缀提示，支持多行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## RAG系统设定 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 存储与日志 BEGIN # 配置日志和其他文件的存储位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BACKEND_LOG_DIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/logs&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 后端服务日志目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">APP_LOG_DIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/log&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 应用行为日志目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TEMP_VOICE_DIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frontend/public/audio&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 临时生成的语音文件存放目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENABLE_FILE_LOGGING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否将日志记录到文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LOG_FILE_DIRECTORY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/run_logs&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 日志文件的存储目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 存储与日志 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Debug信息 BEGIN # 用于开发和调试的设置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LOG_LEVEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=INFO </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 日志设置：默认为INFO，设置为DEBUG时启用开发者模式，输出更详尽的日志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRINT_CONTEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更改True/False，决定是否把本次发送给llm的全部上下文信息截取后打印到终端</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENABLE_FILE_LOGGING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用文件日志记录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Debug信息 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 服务端口配置 BEGIN # 配置各个服务的网络监听地址和端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BACKEND_BIND_ADDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 后端监听地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BACKEND_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=8765 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 后端监听端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FRONTEND_BIND_ADDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 前端监听地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FRONTEND_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=3000 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 前端监听端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EMOTION_BIND_ADDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 情感分析服务监听地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EMOTION_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=8000 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 情感分析服务监听端口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 服务端口配置 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## VITS语音与模型 BEGIN # 配置语音合成及其他模型路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE_VITS_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:23456/voice/vits&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # SIMPLE_VITS_API的语音合成API地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STYLE_VITS_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:5000/voice&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Style-bert-vits2的语音合成API地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EMOTION_MODEL_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;backend/emotion_model_18emo&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 情感分析模型路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## VITS语音与模型 END</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开发者设置 END</span></span></code></pre></div></details><div class="note custom-block github-alert"><p class="custom-block-title">默认未开启RAG功能，因为这必定会导致启动后第一次的白屏，需要等待加载完成刷新才行，有需要请自行在网页打开或修改.env文件。</p><p></p></div><h2 id="启动程序" tabindex="-1">启动程序 <a class="header-anchor" href="#启动程序" aria-label="Permalink to &quot;启动程序&quot;">​</a></h2><h3 id="使用-uv-运行-推荐" tabindex="-1">使用 uv 运行 (推荐) <a class="header-anchor" href="#使用-uv-运行-推荐" aria-label="Permalink to &quot;使用 uv 运行 (推荐)&quot;">​</a></h3><h4 id="前台运行" tabindex="-1">前台运行 <a class="header-anchor" href="#前台运行" aria-label="Permalink to &quot;前台运行&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/windows_main.py</span></span></code></pre></div><h4 id="后台运行" tabindex="-1">后台运行 <a class="header-anchor" href="#后台运行" aria-label="Permalink to &quot;后台运行&quot;">​</a></h4><p>如需在后台运行请使用screen</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动一个screen</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lingchat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行lingchat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/windows_main.py</span></span></code></pre></div><blockquote><p>按<code>Ctrl+a</code>, 再按<code>d</code>, 即可退出screen, 此时,程序仍在后台执行;</p></blockquote><h3 id="传统方式运行" tabindex="-1">传统方式运行 <a class="header-anchor" href="#传统方式运行" aria-label="Permalink to &quot;传统方式运行&quot;">​</a></h3><h4 id="前台运行-1" tabindex="-1">前台运行 <a class="header-anchor" href="#前台运行-1" aria-label="Permalink to &quot;前台运行&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/windows_main.py</span></span></code></pre></div><h4 id="后台运行-1" tabindex="-1">后台运行 <a class="header-anchor" href="#后台运行-1" aria-label="Permalink to &quot;后台运行&quot;">​</a></h4><p>如需在后台运行请使用screen</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动一个screen</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lingchat</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./venv/bin/activate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 激活环境</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行lingchat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/windows_main.py</span></span></code></pre></div><blockquote><p>按<code>Ctrl+a</code>, 再按<code>d</code>, 即可退出screen, 此时,程序仍在后台执行;</p></blockquote><h2 id="四、访问-lingchat" tabindex="-1">四、访问 LingChat <a class="header-anchor" href="#四、访问-lingchat" aria-label="Permalink to &quot;四、访问 LingChat&quot;">​</a></h2><p>放行端口 8765 端口，或者使用ssh端口转发。 在浏览器中访问 <code>http://&lt;你的服务器IP地址&gt;:8765</code> 即可访问LingChat。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>将LingChat部署在公网是非常危险的行为，可能导致您的api被盗刷，请务必在部署时进行安全配置。</p></div><h2 id="四、拉取最新的更新" tabindex="-1">四、拉取最新的更新 <a class="header-anchor" href="#四、拉取最新的更新" aria-label="Permalink to &quot;四、拉取最新的更新&quot;">​</a></h2><p>当你想获取最新的代码时，请在项目根目录（<code>LingChat</code> 文件夹内）执行以下命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 步骤一：放弃所有本地修改，避免冲突（注意：会丢失你的本地改动，请做好备份）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 步骤二：从 GitHub 拉取最新代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您想要获取最新的开发版本，请将 <code>main</code> 替换为 <code>develop</code>。</p></div><h2 id="命令速查表" tabindex="-1">命令速查表 <a class="header-anchor" href="#命令速查表" aria-label="Permalink to &quot;命令速查表&quot;">​</a></h2><h3 id="uv-相关命令-推荐" tabindex="-1">uv 相关命令 (推荐) <a class="header-anchor" href="#uv-相关命令-推荐" aria-label="Permalink to &quot;uv 相关命令 (推荐)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>uv venv</code></td><td>创建Python虚拟环境</td></tr><tr><td><code>uv pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple --upgrade</code></td><td>安装依赖包</td></tr><tr><td><code>uv run python3 backend/windows_main.py</code></td><td>运行LingChat程序</td></tr></tbody></table><h3 id="传统方式命令" tabindex="-1">传统方式命令 <a class="header-anchor" href="#传统方式命令" aria-label="Permalink to &quot;传统方式命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>source ./venv/bin/activate</code></td><td>激活Python虚拟环境（使用venv）</td></tr><tr><td><code>conda activate LingChatEnv</code></td><td>激活Python虚拟环境（使用conda）</td></tr><tr><td><code>python3 backend/windows_main.py</code></td><td>运行LingChat程序</td></tr></tbody></table><h3 id="后台运行相关" tabindex="-1">后台运行相关 <a class="header-anchor" href="#后台运行相关" aria-label="Permalink to &quot;后台运行相关&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>screen -S lingchat</code></td><td>创建一个名为lingchat的screen会话运行运行LingChat程序</td></tr><tr><td><code>Ctrl+a d</code></td><td>退出当前screen会话(程序继续在后台运行)</td></tr><tr><td><code>screen -r lingchat</code></td><td>重新连接到mmc会话</td></tr><tr><td><code>screen -ls</code></td><td>查看所有screen会话列表</td></tr></tbody></table>`,65)]))}const g=i(h,[["render",l]]);export{c as __pageData,g as default};
