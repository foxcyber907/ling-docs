import{_ as r,C as s,c as h,o as e,a2 as i,b as d,G as n,w as l,a as E,a7 as c}from"./chunks/framework.CPU0zDjs.js";const b=JSON.parse('{"title":"🔍 RAG 系统使用说明","description":"","frontmatter":{},"headers":[],"relativePath":"manual/expand/rag.md","filePath":"manual/expand/rag.md","lastUpdated":1753886298000}'),A={name:"manual/expand/rag.md"};function _(B,a,u,g,m,k){const t=s("Mermaid"),p=s("NolebaseGitContributors"),o=s("NolebaseGitChangelog");return e(),h("div",null,[a[1]||(a[1]=i(`<h1 id="🔍-rag-系统使用说明" tabindex="-1">🔍 RAG 系统使用说明 <a class="header-anchor" href="#🔍-rag-系统使用说明" aria-label="Permalink to &quot;🔍 RAG 系统使用说明&quot;">​</a></h1><p>本项目集成了基于检索增强生成（Retrieval-Augmented Generation，RAG）的上下文增强系统，可以显著提升 AI 对话的连贯性和上下文理解能力。</p><h2 id="功能概述" tabindex="-1">功能概述 <a class="header-anchor" href="#功能概述" aria-label="Permalink to &quot;功能概述&quot;">​</a></h2><p>RAG 系统会自动保存对话历史，并在用户提问时：</p><ol><li>检索与当前问题最相关的历史对话片段</li><li>将这些相关片段以上下文形式提供给大语言模型</li><li>增强模型生成更加连贯、符合上下文的回答</li></ol><h2 id="启用与配置" tabindex="-1">启用与配置 <a class="header-anchor" href="#启用与配置" aria-label="Permalink to &quot;启用与配置&quot;">​</a></h2><p>默认情况下，RAG 系统处于禁用状态。若要启用，请在<code>.env</code>文件中添加以下配置：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>USE_RAG=true</span></span></code></pre></div><p>完整的配置参数包括：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># RAG系统基本配置</span></span>
<span class="line"><span>USE_RAG=true                           # 是否启用RAG系统，设置为true或false</span></span>
<span class="line"><span>RAG_HISTORY_PATH=rag_chat_history      # RAG历史记录存储路径</span></span>
<span class="line"><span>CHROMA_DB_PATH=chroma_db_store         # ChromaDB数据库存储路径</span></span>
<span class="line"><span></span></span>
<span class="line"><span># RAG检索配置</span></span>
<span class="line"><span>RAG_RETRIEVAL_COUNT=3                  # 检索的相关上下文块数量</span></span>
<span class="line"><span>RAG_CANDIDATE_MULTIPLIER=3             # 候选检索结果的倍数</span></span>
<span class="line"><span>RAG_CONTEXT_M_BEFORE=2                 # 前向上下文窗口大小</span></span>
<span class="line"><span>RAG_CONTEXT_N_AFTER=2                  # 后向上下文窗口大小</span></span>
<span class="line"><span></span></span>
<span class="line"><span># RAG提示配置</span></span>
<span class="line"><span>RAG_PROMPT_PREFIX=&quot;以下是根据你的问题从历史对话中检索到的相关片段，其中包含了对话发生的大致时间：&quot;  # RAG前缀提示</span></span>
<span class="line"><span>RAG_PROMPT_SUFFIX=&quot;&quot;                   # RAG后缀提示（可选）</span></span></code></pre></div><h2 id="依赖安装" tabindex="-1">依赖安装 <a class="header-anchor" href="#依赖安装" aria-label="Permalink to &quot;依赖安装&quot;">​</a></h2><p>RAG 系统需要安装额外的 Python 依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 \`uv\` 安装</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># uv pip install sentence-transformers chromadb torch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 \`pip\` 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sentence-transformers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chromadb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> torch</span></span></code></pre></div><p>这些依赖已添加到项目的<code>requirements.txt</code>中，且默认安装。</p><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>RAG 系统的工作流程如下：</p>`,16)),(e(),d(c,null,{default:l(()=>[n(t,{id:"mermaid-56",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E7%94%A8%E6%88%B7%E6%8F%90%E9%97%AE%5D%20--%3E%20B%7BRAG%E7%B3%BB%E7%BB%9F%E5%90%AF%E7%94%A8%3F%7D%0A%20%20%20%20B%20--%20%E5%90%A6%20--%3E%20C%5B%E7%9B%B4%E6%8E%A5%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%5D%0A%20%20%20%20B%20--%20%E6%98%AF%20--%3E%20D%5B%E6%A3%80%E7%B4%A2%E7%9B%B8%E5%85%B3%E5%8E%86%E5%8F%B2%E5%AF%B9%E8%AF%9D%5D%0A%20%20%20%20D%20--%3E%20E%5B%E5%90%91%E9%87%8F%E5%8C%96%E5%A4%84%E7%90%86%5D%0A%20%20%20%20E%20--%3E%20F%5BChromaDB%E7%B4%A2%E5%BC%95%E6%A3%80%E7%B4%A2%5D%0A%20%20%20%20F%20--%3E%20G%5B%E9%80%89%E6%8B%A9%E6%9C%80%E7%9B%B8%E5%85%B3%E7%89%87%E6%AE%B5%5D%0A%20%20%20%20G%20--%3E%20H%5B%E6%9E%84%E5%BB%BA%E5%A2%9E%E5%BC%BA%E4%B8%8A%E4%B8%8B%E6%96%87%5D%0A%20%20%20%20H%20--%3E%20I%5B%E7%94%9F%E6%88%90%E5%9B%9E%E7%AD%94%5D%0A%20%20%20%20I%20--%3E%20J%5B%E8%BF%94%E5%9B%9E%E7%94%A8%E6%88%B7%5D%0A"})]),fallback:l(()=>a[0]||(a[0]=[E(" Loading... ")])),_:1})),a[2]||(a[2]=i('<ol><li><strong>保存历史</strong>：所有对话内容会被保存到独立的 JSON 文件中</li><li><strong>向量化</strong>：使用 Sentence Transformers 将对话内容转换为向量嵌入</li><li><strong>索引存储</strong>：使用 ChromaDB 存储和索引向量嵌入</li><li><strong>语义检索</strong>：基于余弦相似度查找与当前查询最相关的历史片段</li><li><strong>上下文增强</strong>：将相关历史片段添加到当前对话上下文中</li></ol><h2 id="独立存储" tabindex="-1">独立存储 <a class="header-anchor" href="#独立存储" aria-label="Permalink to &quot;独立存储&quot;">​</a></h2><p>RAG 系统使用独立的存储机制，不会影响现有的对话历史管理系统：</p><ul><li>RAG 历史记录存储在<code>RAG_HISTORY_PATH</code>指定的路径中</li><li>向量数据库存储在<code>CHROMA_DB_PATH</code>指定的路径中</li></ul><h2 id="查看日志" tabindex="-1">查看日志 <a class="header-anchor" href="#查看日志" aria-label="Permalink to &quot;查看日志&quot;">​</a></h2><p>RAG 系统会输出详细的日志，包括：</p><ul><li>初始化过程</li><li>检索性能指标</li><li>找到的相关上下文信息</li></ul><p>可以通过设置<code>LOG_LEVEL=DEBUG</code>来查看更详细的调试信息。</p><h2 id="性能考虑" tabindex="-1">性能考虑 <a class="header-anchor" href="#性能考虑" aria-label="Permalink to &quot;性能考虑&quot;">​</a></h2><ul><li>首次启动时，RAG 系统需要加载模型和历史数据，可能需要较长时间</li><li>在 CPU 环境下，向量化和检索过程可能较慢</li><li>如果可用，系统会自动使用 GPU 加速计算</li></ul>',10)),n(p),n(o)])}const G=r(A,[["render",_]]);export{b as __pageData,G as default};
