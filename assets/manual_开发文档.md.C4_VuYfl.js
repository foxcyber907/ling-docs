import{_ as e,c as t,o as l,ag as o}from"./chunks/framework.BHpayLOB.js";const p=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"manual/开发文档.md","filePath":"manual/开发文档.md"}'),r={name:"manual/开发文档.md"};function i(h,a,n,s,d,c){return l(),t("div",null,a[0]||(a[0]=[o('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><h2 id="开发流程" tabindex="-1">开发流程 <a class="header-anchor" href="#开发流程" aria-label="Permalink to &quot;开发流程&quot;">​</a></h2><p>开发者们好捏，以下是一份开发指南： 如果你想为项目做贡献，需要遵循一下提交流程~</p><h3 id="step1-功能审核" tabindex="-1">Step1. 功能审核 <a class="header-anchor" href="#step1-功能审核" aria-label="Permalink to &quot;Step1. 功能审核&quot;">​</a></h3><p>向github仓库提交自己的issue，然后艾特我查看功能。请在提交issue的时候说明自己想要实现的功能，更改代码的大概范围和实现思路，等待仓库管理员许可后即可开始施工。</p><h3 id="step2-代码审核" tabindex="-1">Step2. 代码审核 <a class="header-anchor" href="#step2-代码审核" aria-label="Permalink to &quot;Step2. 代码审核&quot;">​</a></h3><p>等待代码编写完毕后，使用规范的commit，为你更改的每个部分写清楚commit标注。保证代码的简洁和功能，可扩展性，注释只保留必要说明。没必要的更改比如大幅度修改空行这种要避免。fork后向项目pull request，等待管理员审核完毕merge就可以啦~ 注意事项： 我们的开发主要在develop分支，稳定版在main分支，提交务必以develop为主。如果有特殊分支版本功能扩展，会开新分支开发。</p><h2 id="团队" tabindex="-1">团队 <a class="header-anchor" href="#团队" aria-label="Permalink to &quot;团队&quot;">​</a></h2><h3 id="管理员-collaborators" tabindex="-1">管理员（Collaborators） <a class="header-anchor" href="#管理员-collaborators" aria-label="Permalink to &quot;管理员（Collaborators）&quot;">​</a></h3><p>钦灵、风雪、Vickko、PL</p><h3 id="交流群" tabindex="-1">交流群 <a class="header-anchor" href="#交流群" aria-label="Permalink to &quot;交流群&quot;">​</a></h3><p>项目交流群：798012738</p><h1 id="项目结构与实现" tabindex="-1">项目结构与实现 <a class="header-anchor" href="#项目结构与实现" aria-label="Permalink to &quot;项目结构与实现&quot;">​</a></h1><h2 id="程序入口" tabindex="-1">程序入口 <a class="header-anchor" href="#程序入口" aria-label="Permalink to &quot;程序入口&quot;">​</a></h2><h3 id="主程序" tabindex="-1">主程序 <a class="header-anchor" href="#主程序" aria-label="Permalink to &quot;主程序&quot;">​</a></h3><ul><li>backend\\windows_main.py为项目入口，他会启动位于8765端口的后端进程，同时打开frontend\\pyqtweb.py，此文件使用pyqt搭建了一个简易的浏览器。你也可以在启动后端进程后，通过浏览器访问localhost:8765来使用本项目</li><li>根目录的start.windows.bat会使用.venv虚拟环境启动backend\\windows_main.py</li><li>项目配置写在.env中，localhost:8765/settings会自动读取.env并生成可视化配置界面。修改.env时请参考.env原有的正确格式</li></ul><h3 id="桌宠" tabindex="-1">桌宠 <a class="header-anchor" href="#桌宠" aria-label="Permalink to &quot;桌宠&quot;">​</a></h3><ul><li>backend\\desktop_pet\\desktop_pet.py为桌宠程序启动入口，桌宠程序完全于主进程独立，所有相关代码实现均位于backend\\desktop_pet\\</li><li>根目录的desk_pet.bat会使用.venv虚拟环境启动backend\\desktop_pet\\desktop_pet.py</li></ul><h2 id="程序结构" tabindex="-1">程序结构 <a class="header-anchor" href="#程序结构" aria-label="Permalink to &quot;程序结构&quot;">​</a></h2><ul><li>backend\\是基于Python的后端程序，运行在8765端口</li><li>frontend\\ 是 html javascript css 的前端文件</li><li>data\\logs文件储存log，对话记录或者缓存数据，可安全删除——不过可能有人要备份聊天记录</li></ul><h2 id="其他相关" tabindex="-1">其他相关 <a class="header-anchor" href="#其他相关" aria-label="Permalink to &quot;其他相关&quot;">​</a></h2><h3 id="torch与神经网络库依赖" tabindex="-1">torch与神经网络库依赖 <a class="header-anchor" href="#torch与神经网络库依赖" aria-label="Permalink to &quot;torch与神经网络库依赖&quot;">​</a></h3><ul><li>本项目使用自行训练的模型识别AI当前情绪并用于切换立绘，因此需要torch依赖。</li><li>本项目使用了RAG-向量库永久记忆系统 <ul><li>开启RAG后，对话的json格式储存在data\\rag_chat_history\\</li><li>语义向量化后缓存在data\\chroma_db_store\\。注意缓存不具备删除功能，如果手动修改或删除了rag_chat_history\\内的内容，请删除整个缓存文件夹chroma_db_store\\以更新记忆库</li></ul></li><li>不过计算开销很低，只需要torch-cpu即可在4代i3以上电脑流畅运行</li></ul><h3 id="go语言后端" tabindex="-1">go语言后端 <a class="header-anchor" href="#go语言后端" aria-label="Permalink to &quot;go语言后端&quot;">​</a></h3><ul><li>当前golong后端完全没有使用到</li></ul>',25)]))}const b=e(r,[["render",i]]);export{p as __pageData,b as default};
